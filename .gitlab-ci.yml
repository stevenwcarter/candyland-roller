# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

image: node:16

variables:
  FF_USE_FASTZIP: "true" # enable fastzip - a faster zip implementation that also supports level configuration.
  ARTIFACT_COMPRESSION_LEVEL: default # can also be set to fastest, fast, slow and slowest. If just enabling fastzip is not enough try setting this to fastest or fast.
  CACHE_COMPRESSION_LEVEL: fastest # same as above, but for caches
  TRANSFER_METER_FREQUENCY: 5s # will display transfer progress every 5 seconds for artifacts and remote caches.

stages: # List of stages for jobs, and their order of execution
  - build
  - deploy

#sonarqube-check-ts:
#  stage: check
#  image:
#    name: sonarsource/sonar-scanner-cli:latest
#    entrypoint: [""]
#  variables:
#    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
#    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
#  cache:
#    key: "${CI_JOB_NAME}"
#    paths:
#      - .sonar/cache
#  script:
#    - sonar-scanner
#  allow_failure: true
#  only:
#    - develop # or the name of your main branch


# sonarqube-check:
#   stage: check
#   image: maven:3.6.3-jdk-11
#   variables:
#     SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
#     GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
#   cache:
#     key: "${CI_JOB_NAME}"
#     paths:
#       - .sonar/cache
#   script:
#     - cd java-server
#     - mvn verify sonar:sonar -Dsonar.projectKey=steve_dnd-react_AYQRcf7E9rlAy6j2DysR
#   allow_failure: true
#   only:
#     - develop # or the name of your main branch


build-job:
  stage: build
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH == "main"
  cache:
    paths:
      - node_modules/
  artifacts:
    paths:
      - $CI_PROJECT_DIR/dist/*
  script:
    - yarn install
    - yarn build

      #unit-test-job: # This job runs in the test stage.
      #  stage: test # It only starts when the job in the build stage completes successfully.
      #  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
      #  rules:
      #    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      #      allow_failure: true
      #    - if: $CI_COMMIT_BRANCH == "develop"
      #    - if: $CI_COMMIT_BRANCH == "main"
      #  cache:
      #    paths:
      #      - node_modules/
      #  dependencies:
      #    - build-job
      #  script:
      #    - yarn test:ci
      #  artifacts:
      #    when: always
      #    reports:
      #      coverage_report:
      #        coverage_format: cobertura
      #        path: $CI_PROJECT_DIR/coverage/cobertura-coverage.xml

deploy-prod-job: # This job runs in the deploy stage.
  stage: deploy # It only runs when *both* jobs in the test stage complete successfully.
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  environment: production
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  dependencies:
    - build-job
  script:
    - echo "{\"auths\":{\"https://docker.javapl.us\":{\"auth\":\"$(printf "%s:%s" "steve" "${DOCKER_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --destination "docker.javapl.us/candyland-roller:1.0.0"

deploy-beta-job: # This job runs in the deploy stage.
  stage: deploy # It only runs when *both* jobs in the test stage complete successfully.
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  environment: beta
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
  dependencies:
    - build-job
  script:
    - echo "{\"auths\":{\"https://docker.javapl.us\":{\"auth\":\"$(printf "%s:%s" "steve" "${DOCKER_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --destination "docker.javapl.us/candyland-roller:1.0.0-beta"

deploy-branch-job: # This job runs in the deploy stage.
  stage: deploy # It only runs when *both* jobs in the test stage complete successfully.
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_BRANCH != "develop" && $CI_COMMIT_BRANCH != "main"
  dependencies:
    - build-job
  script:
    - echo "{\"auths\":{\"https://docker.javapl.us\":{\"auth\":\"$(printf "%s:%s" "steve" "${DOCKER_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --destination "docker.javapl.us/candyland-roller:$CI_COMMIT_BRANCH"
